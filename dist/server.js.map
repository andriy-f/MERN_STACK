{"version":3,"sources":["../server/server.js"],"names":["install","port","parseInt","process","env","PORT","ObjectId","require","app","use","static","urlencoded","extended","json","type","NODE_ENV","webpack","webpackDevMiddleware","webpackHotMiddleware","config","entry","push","plugins","HotModuleReplacementPlugin","bundler","noInfo","log","console","put","req","res","task","body","query","issueId","params","id","error","status","message","issue","_id","err","validateIssue","db","collection","update","convertIssue","then","find","limit","next","savedIssue","catch","connect","connection","listen","get","filter","effort_lte","effort_gte","effort","$lte","$gte","toArray","issues","metadata","total_count","length","records","post","newIssue","created","Date","insertOne","cleanupIssue","result","insertedId","sendFile","resolve"],"mappings":"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","file":"server.js","sourcesContent":["import express from 'express';\nimport bodyParser from 'body-parser';\nimport { MongoClient } from 'mongodb';\nimport Issue from './issue.js';\nimport 'babel-polyfill';\nimport path from 'path';\nimport SourceMapSupport from 'source-map-support';\n\nSourceMapSupport.install();\n\nconst port = parseInt(process.env.PORT, 10) ||8080;\n\nvar ObjectId = require('mongodb').ObjectId;\nconst app = express();\napp.use(express.static('static'));\napp.use(bodyParser.urlencoded({extended: true}));\napp.use(bodyParser.json({type: 'application/*+json'}));\n//app.use(require('connect').bodyParser());\n//app.use(app.router);\n\n\n\n\n\nif (process.env.NODE_ENV !== 'production') {\n  const webpack = require('webpack');\n  const webpackDevMiddleware = require('webpack-dev-middleware');\n  const webpackHotMiddleware = require('webpack-hot-middleware');\n\n  const config = require('../webpack.config');\n  config.entry.app.push('webpack-hot-middleware/client',\n    'webpack/hot/only-dev-server');\n  config.plugins.push(new webpack.HotModuleReplacementPlugin());\n\n  const bundler = webpack(config);\n  app.use(webpackDevMiddleware(bundler, { noInfo: true }));\n  app.use(webpackHotMiddleware(bundler, { log: console.log }));\n}\n\napp.put('/api/issues/:id', (req, res)=> {\n    var task = req.body;\n    console.log(\"the body is : \"+task.query);\n\n    let issueId;\n    try{\n      issueId = new ObjectId(req.params.id);\n    }catch(error){\n      res.status(422).json({message: `Invalid issue ID format : ${error}`});\n      return;\n    }\n    const issue = req.body;\n\n    delete issue._id;\n    const err = Issue.validateIssue(issue);\n    if(err){\n      res.status(422).json({message: `Invalid request: ${err}`});\n      return;\n    }\n\n    db.collection('issues').update({_id: issueId},\n    Issue.convertIssue(issue)).then(()=>\n      db.collection('issues').find({_id: issueId}).limit(1)\n    .next()\n  )\n    .then(savedIssue=>{\n      res.json(savedIssue);\n    })\n    .catch(error=>{\n      console.log(error);\n      res.status(500).json({message: `Internal Server error : ${error}`});\n    });\n});\n\n\nlet db;\nMongoClient.connect('mongodb://localhost/issuetracker').then((connection) => {\n  db = connection;\n\n  app.listen(8080, () => {\n    console.log('App started on port 3000');\n  });\n}).catch((error) => {\n  console.log('ERROR', error);\n});\n\napp.get('/api/issues', (req, res) => {\n  const filter ={};\n  if(req.query.status) filter.status = req.query.status;\n  if(req.query.effort_lte || req.query.effort_gte) filter.effort ={};\n  if(req.query.effort_lte) filter.effort.$lte = parseInt(req.query.effort_lte, 10);\n  if(req.query.effort_gte) filter.effort.$gte = parseInt(req.query.effort_gte, 10);\n\n  db.collection('issues').find(filter).toArray().then((issues) => {\n    const metadata = { total_count: issues.length };\n    res.json({ metadata, records: issues });\n    console.log(\"request\");\n  })\n    .catch((error) => {\n      console.log(error);\n      res.status(500).json({ message: 'Internal Server Error' });\n    });\n});\n\napp.get('/api/issues/:id', (req, res) =>{\n  let issueId;\n  try{\n\n    issueId = ObjectId(req.params.id);\n  }catch(error){\n    res.status(422).json({message:`Invalid issue Id format: ${req.params.id} ${error}`});\n    return;\n  }\n\n  db.collection('issues').find({_id: issueId}).limit(1)\n  .next()\n  .then(issue=>{\n    if(!issue) res.status(404).json({message: `No such issue: ${issueId}`});\n    else res.json(issue);\n  })\n  .catch(error=> {\n    console.log(error);\n    res.status(500).json({message: `Internal server error: ${error}`});\n  });\n});\n\napp.post('/api/issues', (req, res) => {\n  console.log('******** hello ********');\n  const newIssue = req.body;\n  // newIssue.id = issues.length +1;\n  newIssue.created = new Date();\n  if (!newIssue.status) {\n    newIssue.status = 'New';\n  }\n\n  const err = Issue.validateIssue(newIssue);\n  if (err) {\n    console.log('******** error ********');\n    res.status(422).json({ message: `Invalid request: ${err}` });\n    return;\n  }\n\n  db.collection('issues').insertOne(Issue.cleanupIssue(newIssue)).then((result) => {\n    console.log('******** hello1 ********');\n    db.collection('issues').find({ _id: result.insertedId }).limit(1).next()\n      .then((newIssue) => {\n        console.log('******** hello2 ********');\n        res.json(newIssue);\n      })\n      .catch((error) => {\n        console.log(error);\n        res.status(500).json({ message: `Internal Server error : ${error}` });\n      });\n  });\n\n  app.get('*', (req, res) => {\n    res.sendFile(path.resolve('static/index.html'));\n  });\n  // issues.push(newIssue);\n\n  // res.json(newIssue);\n});\n\n// app.listen(3000, ()=>{\n//   console.log('App started on port 3000');\n// });\n"]}