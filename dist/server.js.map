{"version":3,"sources":["../server/server.js"],"names":["install","ObjectId","require","app","use","static","json","db","connect","then","connection","listen","console","log","catch","error","process","env","NODE_ENV","webpack","webpackDevMiddleware","webpackHotMiddleware","config","entry","push","plugins","HotModuleReplacementPlugin","bundler","noInfo","get","req","res","filter","query","status","effort_lte","effort_gte","effort","$lte","parseInt","$gte","collection","find","toArray","issues","metadata","total_count","length","records","message","issueId","params","id","_id","limit","next","issue","post","newIssue","body","created","Date","err","validateIssue","insertOne","cleanupIssue","result","insertedId","sendFile","resolve"],"mappings":"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","file":"server.js","sourcesContent":["import express from 'express';\nimport bodyParser from 'body-parser';\nimport { MongoClient } from 'mongodb';\nimport Issue from './issue.js';\nimport 'babel-polyfill';\nimport path from 'path';\nimport SourceMapSupport from 'source-map-support';\n\nSourceMapSupport.install();\n\nvar ObjectId = require('mongodb').ObjectId;\nconst app = express();\napp.use(express.static('static'));\napp.use(bodyParser.json());\n\nlet db;\nMongoClient.connect('mongodb://localhost/issuetracker').then((connection) => {\n  db = connection;\n\n  app.listen(3000, () => {\n    console.log('App started on port 3000');\n  });\n}).catch((error) => {\n  console.log('ERROR', error);\n});\n\n\nif (process.env.NODE_ENV !== 'production') {\n  const webpack = require('webpack');\n  const webpackDevMiddleware = require('webpack-dev-middleware');\n  const webpackHotMiddleware = require('webpack-hot-middleware');\n\n  const config = require('../webpack.config');\n  config.entry.app.push('webpack-hot-middleware/client',\n    'webpack/hot/only-dev-server');\n  config.plugins.push(new webpack.HotModuleReplacementPlugin());\n\n  const bundler = webpack(config);\n  app.use(webpackDevMiddleware(bundler, { noInfo: true }));\n  app.use(webpackHotMiddleware(bundler, { log: console.log }));\n}\n\n\napp.get('/api/issues', (req, res) => {\n  const filter ={};\n  if(req.query.status) filter.status = req.query.status;\n  if(req.query.effort_lte || req.query.effort_gte) filter.effort ={};\n  if(req.query.effort_lte) filter.effort.$lte = parseInt(req.query.effort_lte, 10);\n  if(req.query.effort_gte) filter.effort.$gte = parseInt(req.query.effort_gte, 10);\n\n  db.collection('issues').find(filter).toArray().then((issues) => {\n    const metadata = { total_count: issues.length };\n    res.json({ metadata, records: issues });\n    console.log(\"request\");\n  })\n    .catch((error) => {\n      console.log(error);\n      res.status(500).json({ message: 'Internal Server Error' });\n    });\n});\n\napp.get('/api/issues/:id', (req, res) =>{\n  let issueId;\n  try{\n\n    issueId = ObjectId(req.params.id);\n  }catch(error){\n    res.status(422).json({message:`Invalid issue Id format: ${req.params.id} ${error}`});\n    return;\n  }\n\n  db.collection('issues').find({_id: issueId}).limit(1)\n  .next()\n  .then(issue=>{\n    if(!issue) res.status(404).json({message: `No such issue: ${issueId}`});\n    else res.json(issue);\n  })\n  .catch(error=> {\n    console.log(error);\n    res.status(500).json({message: `Internal server error: ${error}`});\n  });\n});\n\napp.post('/api/issues', (req, res) => {\n  console.log('******** hello ********');\n  const newIssue = req.body;\n  // newIssue.id = issues.length +1;\n  newIssue.created = new Date();\n  if (!newIssue.status) {\n    newIssue.status = 'New';\n  }\n\n  const err = Issue.validateIssue(newIssue);\n  if (err) {\n    console.log('******** error ********');\n    res.status(422).json({ message: `Invalid request: ${err}` });\n    return;\n  }\n\n  db.collection('issues').insertOne(Issue.cleanupIssue(newIssue)).then((result) => {\n    console.log('******** hello1 ********');\n    db.collection('issues').find({ _id: result.insertedId }).limit(1).next()\n      .then((newIssue) => {\n        console.log('******** hello2 ********');\n        res.json(newIssue);\n      })\n      .catch((error) => {\n        console.log(error);\n        res.status(500).json({ message: `Internal Server error : ${error}` });\n      });\n  });\n\n  app.get('*', (req, res) => {\n    res.sendFile(path.resolve('static/index.html'));\n  });\n  // issues.push(newIssue);\n\n  // res.json(newIssue);\n});\n\n// app.listen(3000, ()=>{\n//   console.log('App started on port 3000');\n// });\n"]}