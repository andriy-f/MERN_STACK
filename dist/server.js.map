{"version":3,"sources":["../server/server.js"],"names":["app","use","static","json","db","connect","then","connection","listen","console","log","catch","error","process","env","NODE_ENV","webpack","require","webpackDevMiddleware","webpackHotMiddleware","config","entry","push","plugins","HotModuleReplacementPlugin","bundler","noInfo","get","req","res","collection","find","toArray","metadata","total_count","issues","length","records","status","message","post","newIssue","body","created","Date","err","validateIssue","insertOne","_id","result","insertedId","limit","next"],"mappings":"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","file":"server.js","sourcesContent":["import express from 'express'\nimport bodyParser from 'body-parser'\nimport {MongoClient} from 'mongodb'\nimport Issue from './issue.js'\n\n\nconst app = express();\napp.use(express.static('static'));\napp.use(bodyParser.json());\n\nlet db;\nMongoClient.connect('mongodb://localhost/issuetracker').then(connection=>{\n db = connection;\n\n app.listen(3000, ()=>{\n   console.log('App started on port 3000');\n });\n}).catch(error=>{\n  console.log('ERROR', error);\n});\n\nif(process.env.NODE_ENV !== 'production'){\n  const webpack = require('webpack');\n  const webpackDevMiddleware = require('webpack-dev-middleware');\n  const webpackHotMiddleware = require('webpack-hot-middleware');\n\n  const config = require('../webpack.config');\n  config.entry.app.push('webpack-hot-middleware/client',\n'webpack/hot/only-dev-server');\nconfig.plugins.push(new webpack.HotModuleReplacementPlugin());\n\nconst bundler = webpack(config);\napp.use(webpackDevMiddleware(bundler, {noInfo: true}));\napp.use(webpackHotMiddleware(bundler, {log: console.log}));\n}\n\n\napp.get('/api/issues', (req, res)=>{\n  // const metadata = {total_count: issues.length };\n  // console.log(\"printing a log statement before sending the response\");\n  // res.json({_metadata: metadata, records:issues} );\n\n  db.collection('issues').find().toArray().then(issues =>{\n    const metadata = {total_count: issues.length};\n    res.json ({ metadata: metadata, records: issues});\n  }).catch(error=>{\n    console.log(error);\n    res.status(500).json({message: 'Internal Server Error'});\n  });\n\n\n});\n\napp.post('/api/issues', (req, res)=>{\n  console.log(\"******** hello ********\")\n  const newIssue = req.body;\n  //newIssue.id = issues.length +1;\n  newIssue.created = new Date();\n  if(!newIssue.status){\n    newIssue.status = 'New';\n  }\n\n  const err = Issue.validateIssue(newIssue);\n    if(err){\n      console.log(\"******** error ********\")\n      res.status(422).json({message: `Invalid request: ${err}`});\n      return;\n    }\n\n    db.collection('issues').insertOne(newIssue).then(result=>{\n      console.log(\"******** hello1 ********\")\n      db.collection('issues').find({_id: result.insertedId}).limit(1).next().\n      then(newIssue=>{\n        console.log(\"******** hello2 ********\")\n        res.json(newIssue);\n      }).catch(error=>{\n        console.log(error);\n        res.status(500).json({message: `Internal Server error : ${error}`});\n      });\n    });\n  //issues.push(newIssue);\n\n  //res.json(newIssue);\n});\n\n// app.listen(3000, ()=>{\n//   console.log('App started on port 3000');\n// });\n"]}