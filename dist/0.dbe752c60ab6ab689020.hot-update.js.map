{"version":3,"sources":["webpack:///./static/src/IssueEdit.jsx"],"names":["IssueEdit","Component","dataFetcher","params","urlBase","fetch","id","then","response","ok","json","error","Promise","reject","data","constructor","props","context","issue","initialState","created","Date","completionDate","_id","title","owner","effort","state","invalidFields","showingValidation","toastVisible","toastMessage","toastType","dismissValidation","bind","showValidation","showSuccess","showError","onChange","onValidityChange","onSubmit","componentDidMount","loadData","componentDidUpdate","prevProps","event","valid","Object","assign","target","name","setState","preventDefault","keys","length","method","headers","body","JSON","stringify","updateIssue","message","catch","err","convertedValue","value","toDateString","dismissToast","render","validationMessage","status","contextTypes","PropTypes","object","isRequired"],"mappings":"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","file":"0.dbe752c60ab6ab689020.hot-update.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router';\nimport { LinkContainer} from 'react-router-bootstrap';\nimport {FormGroup, FormControl, ControlLabel, ButtonToolbar,\n      Button, Panel, Form, Col, Alert } from 'react-bootstrap';\n\nimport NumInput from './NumInput.jsx';\nimport DateInput from './DateInput.jsx';\nimport Toast from './Toast.jsx';\n\nclass IssueEdit extends React.Component { // eslint-disable-line\nstatic dataFetcher({params, urlBase}){\n  return fetch(`${urlBase ||''}/api/issues/${params.id}`).then(response=>{\n    if(!response.ok) return response.json().then(error=>Promise.reject(error));\n    return response.json().then(data=> ({IssueEdit : data}));\n  });\n}\n\nconstructor(props, context){\n  super(props, context);\n  // const issue = context.initialState.data;\n  // issue.created = new Date(issue.created);\n  // issue.completionDate = issue.completionDate != null ? new Date(issue.completionDate) : null;\n\n  let issue;\n  if(context.initialState && context.initialState.IssueEdit){\n    issue = context.initialState.IssueEdit;\n    issue.created = new Date(issue.created);\n    issue.completionDate = issue.completionDate != null ? new Date(issue.completionDate) : null;\n\n  }else{\n    issue ={\n      _id : '',\n      title: '',\n      owner: '',\n      effort: null,\n      completionDate: null,\n      created: null,\n    };\n  }\n\n  this.state = {\n      issue,\n      invalidFields: {},\n      showingValidation: false,\n      toastVisible: false, toastMessage: '', toastType: 'success',\n  };\n  this.dismissValidation = this.dismissValidation.bind(this);\n  this.showValidation =this.showValidation.bind(this);\n  this.showSuccess =this.showSuccess.bind(this);\n  this.showError = this.showError.bind(this);\n  this.onChange = this.onChange.bind(this);\n  this.onValidityChange = this.onValidityChange.bind(this);\n  this.onSubmit = this.onSubmit.bind(this);\n\n}\n\ncomponentDidMount(){\n    this.loadData();\n}\n\ncomponentDidUpdate(prevProps){\n\n  if(prevProps.params.id !== this.props.params.id){\n    this.loadData();\n  }\n}\n\nonValidityChange(event, valid){\n  const invalidFields = Object.assign({}, this.state.invalidFields);\n  if(!valid){\n    invalidFields[event.target.name] = true;\n  }else{\n    delete invalidFields[event.target.name];\n  }\n  this.setState({invalidFields});\n}\n\nshowValidation(event){\n  this.setState({showingValidation: true});\n}\n\ndismissValidation(event){\n  this.setState({showingValidation: false});\n}\nonSubmit(event){\n  event.preventDefault();\n  this.showValidation();\n  if(Object.keys(this.state.invalidFields).length !== 0){\n    return;\n  }\n  fetch(`/api/issues/${this.props.params.id}`, {\n    method:'PUT',\n    headers: {'Content-Type': 'application/json'},\n    body: JSON.stringify(this.state.issue),\n  }).then(response =>{\n    if(response.ok){\n    response.json().then(updateIssue =>{\n      updateIssue.created  = new Date(updateIssue.created);\n      if(updateIssue.completionDate){\n        updateIssue.completionDate = new Date(updateIssue.completionDate);\n      }\n      this.setState({issue: updateIssue});\n      this.showSuccess('Updated issue successfully.');\n    });\n  }else{\n    response.json().then(error=>{\n      this.showError(`Failed to update issue: ${error.message}`);\n    });\n  }\n}).catch(err =>{\n  this.showError(`Error in sending data to server: ${err.message}`);\n});\n}\n\nonChange(event, convertedValue){\n  const issue =  Object.assign({}, this.state.issue);\n  const value = (convertedValue != null) ? convertedValue : event.target.value;\n  issue[event.target.name] = value;\n\n  if (event.target.name === 'effort' && value === '') {\n    issue[event.target.name] = null;\n  }\n\n  if (event.target.name === 'completionDate' && typeof value !== 'string') {\n    issue[event.target.name] = value.toDateString();\n  }\n  this.setState({issue});\n}\n\nloadData(){\n  // fetch(`/api/issues/${this.props.params.id}`).then(response =>{\n  //   if(response.ok){\n  //     response.json().then(issue =>{\n  //       issue.created = new Date(issue.created);\n  //       issue.completionDate = issue.completionDate != null ?\n  //        new Date(issue.completionDate) : '';\n  //       this.setState({ issue });\n  //     });\n  //   }else{\n  //     response.json().then(error =>{\n  //       this.showError(`Failed to fetch issue: ${error.message}`);\n  //     });\n  //\n  //   }\n  // }).catch(err => {\n  //   this.showError(`Error in fetching data from server : ${err.message}`);\n  // });\n\n  IssueEdit.dataFetcher({params: this.props.params}).then(data=>{\n    const issue = data.IssueEdit;\n    issue.created = new Date(issue.created);\n    issue.completionDate =issue.completionDate != null ? new Date(issue.completionDate) : null;\n    this.setState({issue});\n  }).catch(err =>{\n    this.showError(`Error in fetching data from server : ${err.message}`);\n  });\n}\n\nshowSuccess(message){\n  this.setState({toastVisible: true, toastMessage: message, toastType: 'success'});\n}\n\nshowError(message){\n  this.setState({toastVisible: true, toastMessage: message, toastType: 'danger'});\n}\n\ndismissToast(){\n  this.setState({toastVisible: false});\n}\n  render() {\n    const issue = this.state.issue;\n    let validationMessage =null;\n    if(Object.keys(this.state.invalidFields).length !== 0 && this.state.showingValidation){\n      validationMessage =(\n        <Alert bsStyle=\"danger\" onDismiss={this.dismissValidation}>\n          Please correct invalid Fields before submitting.\n        </Alert>\n      );\n    }\n    return (\n      <Panel header=\"Edit Issue\">\n        <Form horizontal onSubmit={this.onSubmit}>\n          <FormGroup>\n            <Col componentClass={ControlLabel} sm={3}>ID</Col>\n            <Col sm={9}><FormControl.Static>{issue._id}</FormControl.Static></Col>\n          </FormGroup>\n          <FormGroup>\n            <Col componentClass={ControlLabel} sm={3}>Created</Col>\n            <Col sm={9}><FormControl.Static>\n              {issue.created ? issue.created.toDateString() : ''}\n            </FormControl.Static></Col>\n          </FormGroup>\n          <FormGroup>\n            <Col componentClass={ControlLabel} sm={3}>Status</Col>\n            <Col sm={9}>\n              <FormControl componentClass=\"select\" name=\"status\" value={issue.status} onChange={this.onChange}>\n                <option value=\"New\"> New </option>\n                <option value=\"Open\">Open </option>\n                <option value=\"Assigned\"> Assigned </option>\n                <option value=\"Fixed\"> Fixed </option>\n                <option value=\"Verified\">Verified </option>\n                <option value=\"Closed\"> Closed </option>\n              </FormControl>\n            </Col>\n          </FormGroup>\n          <FormGroup>\n            <Col componentClass={ControlLabel} sm={3}>Owner </Col>\n            <Col sm={9}>\n              <FormControl name=\"owner\"  type=\"text\" value={this.state.issue.owner} onChange={this.onChange} />\n            </Col>\n          </FormGroup>\n          <FormGroup>\n            <Col componentClass={ControlLabel} sm={3}>Effort</Col>\n            <Col sm={9}>\n              <FormControl componentClass={NumInput} name=\"effort\" type=\"text\" value={this.state.issue.effort} onChange={this.onChange} />\n            </Col>\n          </FormGroup>\n          <FormGroup validationState={this.state.invalidFields.completionDate ? 'error' : null}>\n            <Col componentClass={ControlLabel} sm={3}> Completion Date </Col>\n            <Col sm={9}>\n              <FormControl componentClass={DateInput} name=\"completionDate\"  value={this.state.issue.completionDate}\n                onChange={this.onChange} onValidityChange={this.onValidityChange} />\n                <FormControl.Feedback />\n            </Col>\n          </FormGroup>\n          <FormGroup>\n            <Col smOffset={3} sm={6}>\n              <ButtonToolbar>\n                <Button bsStyle=\"primary\" type=\"submit\">Submit</Button>\n                <LinkContainer to=\"/issues\">\n                  <Button bsStyle=\"link\">Back </Button>\n                </LinkContainer>\n              </ButtonToolbar>\n            </Col>\n          </FormGroup>\n          {/*Id: {issue._id}\n          <br />\n          Created: {issue.created ? issue.created.toDateString : ''}\n          <br />\n          Status:\n          <select name=\"status\" value={issue.status} onChange={this.onChange}>\n            <option value=\"New\"> New </option>\n            <option value=\"Open\">Open </option>\n            <option value=\"Assigned\"> Assigned </option>\n            <option value=\"Fixed\"> Fixed </option>\n            <option value=\"Verified\">Verified </option>\n            <option value=\"Closed\"> Closed </option>\n          </select>\n          <br />\n          Owner\n          <input name=\"owner\"  type=\"text\" value={this.state.issue.owner} onChange={this.onChange} />\n         <br />\n          Effort\n          <NumInput size={5} name=\"effort\" type=\"text\" value={this.state.issue.effort} onChange={this.onChange} />\n          <br />\n        Completion Date:\n          <DateInput name=\"completionDate\" value={issue.completionDate}\n            onChange={this.onChange} onValidityChange={this.onValidityChange} />\n          <br />\n          Title:\n          <input name=\"title\" type=\"text\" size={50} value={issue.title} onChange={this.onChange} />\n          <br />\n          {validationMessage}\n          <button type=\"submit\"> Submit </button>\n          <Link to=\"/issues\"> Back to issue List </Link> */}\n          <FormGroup>\n            <Col smOffset={3} sm={9}>{validationMessage}</Col>\n          </FormGroup>\n\n        </Form>\n        <Toast showing={this.state.toastVisible} message={this.state.toastMessage}\n          onDismiss={this.dismissToast} bsStyle={this.state.toastType} />\n      </Panel>\n    );\n  }\n}\n\nIssueEdit.contextTypes = {\n  initialState: React.PropTypes.object,\n};\n\nIssueEdit.PropTypes = {\n  params: PropTypes.object.isRequired,\n};\n\nexport default IssueEdit;\n\n\n\n// WEBPACK FOOTER //\n// ./static/src/IssueEdit.jsx"],"sourceRoot":""}