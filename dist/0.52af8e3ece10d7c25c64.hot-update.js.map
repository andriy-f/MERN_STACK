{"version":3,"sources":["webpack:///./server/renderedPageRouter.jsx"],"names":["renderedPageRouter","get","req","res","routes","location","url","error","redirectLocation","renderProps","status","send","message","redirect","pathname","search","fetch","then","response","json","data","initialState","html","catch","err","console","log"],"mappings":";;;;;;;;;;;;;AAAA;;;;AACA;;AACA;;AAEA;;;;AAGA;;;;AACA;;;;AACA;;;;;;AAEA,MAAMA,qBAAqB,uBAA3B;;AALA;;;AAQAA,mBAAmBC,GAAnB,CAAuB,GAAvB,EAA4B,CAACC,GAAD,EAAMC,GAAN,KAAa;AACvC,0BAAM,EAACC,wBAAD,EAASC,UAAUH,IAAII,GAAvB,EAAN,EAAmC,CAACC,KAAD,EAAQC,gBAAR,EAA0BC,WAA1B,KAAyC;AAC1E,QAAGF,KAAH,EAAS;AACPJ,UAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBJ,MAAMK,OAA3B;AACD,KAFD,MAEO,IAAGJ,gBAAH,EAAoB;AACzBL,UAAIU,QAAJ,CAAa,GAAb,EAAkBL,iBAAiBM,QAAjB,GAA4BN,iBAAiBO,MAA/D;AACD,KAFM,MAEA,IAAGN,WAAH,EAAe;AACpBO,YAAO,4BAA2Bd,IAAII,GAAI,EAA1C,EACCW,IADD,CACMC,YAAaA,SAASC,IAAT,EADnB,EAECF,IAFD,CAEMG,QAAO;AACX,cAAMC,eAAe,EAACD,UAAD,EAArB;AACA,cAAME,OAAO,4BACX;AAAA;AAAA,YAAgB,cAAcD,YAA9B;AACE,oEAAmBZ,WAAnB;AADF,SADW,CAAb;AAKAN,YAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,wBAASW,IAAT,EAAeD,YAAf,CAArB;AACD,OAVD,EAUGE,KAVH,CAUSC,OAAK;AACZC,gBAAQC,GAAR,CAAa,+BAA8BF,GAAI,EAA/C;AACD,OAZD;AAaD,KAdM,MAcD;AACJrB,UAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,WAArB;AACD;AACF,GAtBD;AAuBA;AACA;AACA;AACD,CA3BD;kBA4BeX,kB","file":"0.52af8e3ece10d7c25c64.hot-update.js","sourcesContent":["import React from 'react';\nimport {renderToString } from 'react-dom/server.js';\nimport {match, RouterContext } from 'react-router';\n\nimport Router from 'express';\n\n//import HelloWorld from '../static/src/HelloWorld.jsx';\nimport template from './template.js';\nimport routes from '../src/Routes.jsx';\nimport ContextWrapper from '../src/ContextWrapper.jsx';\n\nconst renderedPageRouter = new Router();\n\n\nrenderedPageRouter.get('*', (req, res) =>{\n  match({routes, location: req.url}, (error, redirectLocation, renderProps) =>{\n    if(error){\n      res.status(500).send(error.message);\n    } else if(redirectLocation){\n      res.redirect(302, redirectLocation.pathname + redirectLocation.search);\n    } else if(renderProps){\n      fetch(`http://localhost:3000/api${req.url}`)\n      .then(response => (response.json()))\n      .then(data =>{\n        const initialState = {data};\n        const html = renderToString(\n          <ContextWrapper initialState={initialState} >\n            <RouterContext {...renderProps} />\n          </ContextWrapper>\n        );\n        res.status(200).send(template(html, initialState));\n      }).catch(err=>{\n        console.log(`Error rendering to string : ${err}`);\n      });\n    }else {\n      res.status(404).send('Not Found');\n    }\n  });\n  // const initialState = {addressee: 'Universe'};\n  // const html = renderToString(<HelloWorld {...initialState} />);\n  // res.send(template(html, initialState));\n});\nexport default renderedPageRouter;\n\n\n\n// WEBPACK FOOTER //\n// ./server/renderedPageRouter.jsx"],"sourceRoot":""}